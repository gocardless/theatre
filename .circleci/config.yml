---
version: 2

references:
  docker_golang: &docker_golang
    docker:
      - image: golang:1.17.3
    working_directory: /go/src/github.com/gocardless/theatre

jobs:
  check-generated-resources:
    <<: *docker_golang
    steps:
      - checkout
      - run:
          name: Install prettier
          command: |
            curl -sL https://deb.nodesource.com/setup_10.x > setup-node_10.x
            chmod +x setup-node_10.x && ./setup-node_10.x
            apt install -y nodejs npm
            npm install -g prettier
      - run:
          name: Ensure generated CRDs and manifests are up to date
          command: make manifests && git diff --exit-code config/

  vet:
    <<: *docker_golang
    steps:
      - checkout
      - run:
          name: Ensure no go vet errors
          command: |
            go vet ./cmd/rbac-manager/... 
            go vet ./cmd/theatre-consoles/...
            go vet ./cmd/theatre-secrets/...
            go vet ./cmd/vault-manager/...
            go vet ./cmd/workloads-manager/...

  unit-integration:
    <<: *docker_golang
    steps:
      - checkout
      - run:
          name: Install ginkgo test runner
          command: go install github.com/onsi/ginkgo/ginkgo@v1.16.5
      - run:
          name: Install Kubebuilder test helpers
          command: |
            mkdir /usr/local/kubebuilder
            curl -fsL https://github.com/kubernetes-sigs/kubebuilder/releases/download/v2.3.1/kubebuilder_2.3.1_linux_amd64.tar.gz \
              | tar -xvz --strip=1 -C /usr/local/kubebuilder
      - run:
          name: Run tests
          command: |
            ginkgo -race -randomizeSuites -randomizeAllSpecs -r -v ./...


  build:
    <<: *docker_golang
    steps:
      - checkout
      - run:
          name: Build test binaries
          command: make bin/acceptance.linux_amd64
      - persist_to_workspace:
          root: /go/src/github.com/gocardless/theatre
          paths: ['bin']

  acceptance:
    machine:
      image: ubuntu-2004:202201-02
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Install tooling
          command: |
            sudo bash <<EOF
            curl -fsL -o /usr/local/bin/kind https://github.com/kubernetes-sigs/kind/releases/download/v0.11.1/kind-linux-amd64
            curl -fsL https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.4.1/kustomize_v4.4.1_linux_amd64.tar.gz \
              | tar xfz -
            mv -v kustomize /usr/local/bin/kustomize
            curl -fsL -o /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/v1.22.3/bin/linux/amd64/kubectl

            chmod a+x /usr/local/bin/kustomize /usr/local/bin/kubectl /usr/local/bin/kind
            EOF
      # Sleep to wait for everything to install properly before beginning tests
      - run:
          name: Prepare the cluster
          command: workspace/bin/acceptance.linux_amd64 prepare --verbose && sleep 10
      - run:
          name: Run acceptance tests
          command: workspace/bin/acceptance.linux_amd64 run --verbose
      # If the test failed due to a flake then we want to gather as much
      # information as possible, because it could be hard to reproduce.
      - run:
          name: Show events
          command: kubectl get events
          when: on_fail
      - run:
          name: Show workloads logs
          command: kubectl -n theatre-system logs theatre-workloads-manager-0
          when: on_fail
      - run:
          name: Show rbac logs
          command: kubectl -n theatre-system logs theatre-rbac-manager-0
          when: on_fail

  release:
    <<: *docker_golang
    steps:
      - add_ssh_keys:
          fingerprints:
            - 60:aa:94:d0:56:d8:c9:37:08:c2:41:a8:9d:06:d2:61
      - checkout
      - run:
          name: Release
          command: |
            CURRENT_VERSION="v$(cat VERSION)"

            if [[ $(git tag -l "${CURRENT_VERSION}") == "${CURRENT_VERSION}" ]]; then
              echo "Version ${CURRENT_VERSION} is already released"
              exit 0
            fi

            curl -L -o /tmp/goreleaser_Linux_x86_64.tar.gz https://github.com/goreleaser/goreleaser/releases/download/v0.133.0/goreleaser_Linux_x86_64.tar.gz
            tar zxf /tmp/goreleaser_Linux_x86_64.tar.gz -C /tmp

            git log --pretty=oneline --abbrev-commit --no-decorate --no-color "$(git describe --tags --abbrev=0)..HEAD" -- pkg cmd vendor internal > /tmp/release-notes
            git tag "${CURRENT_VERSION}"
            git push --tags

            /tmp/goreleaser --rm-dist --release-notes /tmp/release-notes

workflows:
  version: 2
  build-integration:
    jobs:
      - check-generated-resources
      - vet
      - unit-integration
      - build
      - acceptance:
          requires: [build]
      - release:
          requires: [acceptance]
          filters:
            branches: {only: master}
